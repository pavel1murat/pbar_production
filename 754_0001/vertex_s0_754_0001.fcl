# -*- mode:tcl -*-
// Andrei Gaponenko, 2015

#include "fcl/minimalMessageService.fcl"
#include "fcl/standardProducers.fcl"
#include "fcl/standardServices.fcl"
#include "Mu2eG4/fcl/prolog.fcl"

BEGIN_PROLOG

pbars0out: {
   type: pdgId
   pars: [ -2212 ]  # stop and save pbars
   write: pbars0
}

// Energy cut on everything.  Very conservative: 2*m_proton.
pbars0EkCuts: {  type: kineticEnergy  cut: 1876. } // MeV

END_PROLOG

# Give this job a name.
process_name : pbars0

source : {
   module_type : EmptyEvent
   maxEvents   : @nil
}

services : { @table::Services.Sim 
    TFileService          : { fileName : "nts.owner.pbar_g4s0.754_0001.sequencer.root" }
    GeometryService       : { @table::Services.Sim.GeometryService
	inputFile         : "pbar_production/754_0001/geom_754_0001.txt"
    }  
}

physics : {
    producers : {
	generate  : { @table::PrimaryProtonGun }
	genCounter: { module_type : GenEventCounter }
	g4run     : { @table::Mu2eG4.producers.g4run 
#------------------------------------------------------------------------------
# Mu2eG4 cuts are evaluated in the listed order. The first match wins.  
# For the "intersection" type, the first false stops the evaluation.
# For the "union" type the first true stops the evaluation.
#------------------------------------------------------------------------------
	    Mu2eG4SteppingOnlyCut : { }

	    Mu2eG4CommonCut : {  
		type: plane normal: [  0,  0, -1 ] point : [ 0, 0, -6500 ]
	    }

	    Mu2eG4StackingOnlyCut : { 
		type: union
		pars: [
		       {type: intersection pars: [ 
						  {type: pdgId pars:  [ 2212,2112 ]}, 
						  {type: kineticEnergy cut: 4000.0} 
						 ] },
		       {type: intersection pars: [ 
						  {type: pdgId pars:  [ 211, -211 ]}, 
						  {type: kineticEnergy cut: 6000.0} 
						 ] },
		       {type: notPdgId pars:  [ 2212,2112, 211, -211 ]}
		      ]
	    }

	    SimParticlePrinter : {
		enabled             : false
		primariesOnly       : false
		prefix              : "SimParticle: "
	    }

	}

	compressPV : {
	    module_type    : CompressPhysicalVolumes
	    volumesInput   : "g4run"
	    hitInputs      : []
	    particleInputs : [ "g4run" ]
	}    
    }

    analyzers : {
	genCountLogger : {
	    module_type : GenEventCountReader
	}
    }

    filters: {
	g4filter: {
	    module_type               : FilterG4Out
	    mainHitInputs             : [ "g4run:pbars0" ]
	    vetoDaughters             : []
	}
    }

    trigFilter    : [ generate, genCounter, g4run, compressPV]
    trigger_paths : [ trigFilter ]

    e1        : [ genCountLogger, filteredOutput ]
    end_paths : [ e1 ]
}

outputs: {
    filteredOutput     : {
	module_type    : RootOutput
	SelectEvents   : ["trigFilter"]
	outputCommands : [ "drop *_*_*_*",
			   "keep mu2e::GenParticles_*_*_*",
			   "keep mu2e::GenEventCount_*_*_*",
			   "keep mu2e::SimParticle*_*_*_*",
			   "keep mu2e::StatusG4_*_*_*",
			   "keep *_pbarWrite_*_*",
			   "keep *_compressPV_*_*" ]
	fileName       : "sim.owner.pbar_s0.754_0001.sequencer.art"
    }

    allOutput     : {
	module_type    : RootOutput
	SelectEvents   : ["trigFilter"]
	outputCommands : [ "keep *_*_*_*" ]
	fileName       : "sim.owner.pbar_s0_unfiltered.754_0001.sequencer.art"
    }
}

physics.producers.g4run.physics.minRangeCut : 1.0 // mm
#physics.producers.g4run.physics.physicsListName: "FTFP_BERT_PBAR_MU2E02"

// Limit the amount of "Begin processing the ... record" messages
services.message.destinations.log.categories.ArtReport.reportEvery : 1
services.message.destinations.log.categories.ArtReport.limit : 1
services.message.destinations.log.categories.ArtReport.timespan : 300

# this is needed now...
services.SeedService.baseSeed          : 8
services.SeedService.maxUniqueEngines  : 20
